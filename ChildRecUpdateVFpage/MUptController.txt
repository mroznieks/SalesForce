public with sharing class MassUpdateController {

   private integer counter=0;  //keeps track of the offset
   private integer list_size=20; //sets the page size or number of rows
   public integer total_size; //used to show user the total size of the list
   Contact[] contacts {get;set;}
   Private Id accID;

   //Constructor
   public MassUpdateController(ApexPages.StandardController controller) {
   accID=  ApexPages.currentPage().getParameters().get('id');
   Contact[] contacts = new List<Contact>();
   total_size = [select count() from Contact WHERE AccountID = : accID]; //set the total size in the constructor
      
   }
    

   public Contact[] getContacts() {
    
             contacts = [select Name,Title,Email,HasOptedOutOfEmail,Birthdate from Contact 
                               WHERE AccountID = : accID  limit :list_size offset :counter];

         return contacts;
          
      } 
       
    
    public PageReference customSave(){  //user clicker save
        system.debug('save method invoked '+contacts);
        
        update contacts;
        return null;
    }
    public PageReference cancel(){  //user clicker cancel
    return null;    
    }

   public PageReference Beginning() { //user clicked beginning
      counter = 0;
      return null;
   }

   public PageReference Previous() { //user clicked previous button
      counter -= list_size;
      return null;
   }

   public PageReference Next() { //user clicked next button
      counter += list_size;
      return null;
   }

   public PageReference End() { //user clicked end
       if (math.mod(total_size, list_size)!=0) {
      	counter = total_size - math.mod(total_size, list_size); 
       } else {
           counter=total_size-list_size;
       }
      return null;
   }

   public Boolean getDisablePrevious() { 
      //this will disable the previous and beginning buttons
      if (counter>0) return false; else return true;
   }

   public Boolean getDisableNext() { //this will disable the next and end buttons
      if (counter + list_size < total_size) return false; else return true;
   }

   public Integer getTotal_size() {
      return total_size;
   }

   public Integer getPageNumber() {
      return counter/list_size + 1;
   }

   public Integer getTotalPages() {
      if (math.mod(total_size, list_size) > 0) {
         return total_size/list_size + 1;
      } else {
         return (total_size/list_size);
      }
   }
}